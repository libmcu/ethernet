#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockSupport.h"

#include "eth/homeplug/qca.h"

TEST_GROUP(QCA) {
	void setup(void) {
	}
	void teardown(void) {
		mock().checkExpectations();
		mock().clear();
	}
};

TEST(QCA, VERSION_REQ) {
	uint8_t expected[] = {
		0xb2, 0x7c, 0x2e, 0x58, 0x9d, 0x71, 0x00, 0xe0, 0x4c, 0x36, 0x07, 0x91,
		0x88, 0xe1, 0x00, 0x00, 0xa0, 0x00, 0xb0, 0x52, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	uint8_t buf[64] = { 0, };
	size_t len = qca_pack_query(QCA_MMTYPE_SW_VER, (struct eth *)buf, sizeof(buf));
	LONGS_EQUAL(24, len);

	struct eth *eth = (struct eth *)buf;
	eth_set_dst(eth, &expected[0]);
	eth_set_src(eth, &expected[6]);

	MEMCMP_EQUAL(expected, buf, sizeof(expected));
}

TEST(QCA, VERSION_CNF) {
	uint8_t bin[] = {
0x00, 0xe0, 0x4c, 0x36, 0x07, 0x91, 0xb2, 0x7c, 0x2e, 0x58, 0x9d, 0x71, 0x88, 0xe1, 0x00, 0x01,
0xa0, 0x00, 0xb0, 0x52, 0x00, 0x22, 0x24, 0x4d, 0x41, 0x43, 0x2d, 0x51, 0x43, 0x41, 0x37, 0x30,
0x30, 0x35, 0x2d, 0x33, 0x2e, 0x31, 0x2e, 0x30, 0x2e, 0x31, 0x34, 0x2d, 0x30, 0x30, 0x2d, 0x32,
0x30, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x2d, 0x43, 0x53, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x58, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	};
	uint8_t oda[] = { 0x00, 0xe0, 0x4c, 0x36, 0x07, 0x91 };
	uint8_t osa[] = { 0xb2, 0x7c, 0x2e, 0x58, 0x9d, 0x71 };
	uint8_t oui[] = { 0x00, 0xb0, 0x52 };

	struct eth *eth = (struct eth *)bin;
	struct eth_mme *mme = (struct eth_mme *)eth->payload;
	LONGS_EQUAL(0, mme->mmv);
	LONGS_EQUAL(qca_mmtype_to_value(QCA_MMTYPE_SW_VER) + 1, mme->mmtype);
	MEMCMP_EQUAL(oda, eth->dst, sizeof(eth->dst));
	MEMCMP_EQUAL(osa, eth->src, sizeof(eth->src));

	struct qca_mme *qca = (struct qca_mme *)mme->body;
	MEMCMP_EQUAL(oui, qca->oui, sizeof(qca->oui));

	struct qca_mme_ver_cnf *ver = (struct qca_mme_ver_cnf *)qca->body;
	LONGS_EQUAL(0, ver->status);
	LONGS_EQUAL(0x22, ver->device_class);
	LONGS_EQUAL(36, ver->verlen);
	LONGS_EQUAL(0x001b587c, ver->ic_id);
	LONGS_EQUAL(0, ver->ic_rev);
	LONGS_EQUAL(1, ver->chip_serial);
	LONGS_EQUAL(0x3f, ver->chip_package);
	LONGS_EQUAL(0, ver->chip_option);
}

TEST(QCA, mmtype_to_value_ShouldReturnMmtypeValue) {
	LONGS_EQUAL(0xA000, qca_mmtype_to_value(QCA_MMTYPE_SW_VER));
	LONGS_EQUAL(0xA004, qca_mmtype_to_value(QCA_MMTYPE_WR_MEM));
	LONGS_EQUAL(0xA010, qca_mmtype_to_value(QCA_MMTYPE_GET_NVM));
	LONGS_EQUAL(0xA030, qca_mmtype_to_value(QCA_MMTYPE_LINK_STATS));
	LONGS_EQUAL(0xA038, qca_mmtype_to_value(QCA_MMTYPE_NW_INFO));
	LONGS_EQUAL(0xA040, qca_mmtype_to_value(QCA_MMTYPE_CP_RPT));
	LONGS_EQUAL(0xA050, qca_mmtype_to_value(QCA_MMTYPE_SET_KEY));
	LONGS_EQUAL(0xA060, qca_mmtype_to_value(QCA_MMTYPE_HST_ACTION));
	LONGS_EQUAL(0xA068, qca_mmtype_to_value(QCA_MMTYPE_OP_ATTR));
	LONGS_EQUAL(0xA07C, qca_mmtype_to_value(QCA_MMTYPE_FAC_DEFAULT));
	LONGS_EQUAL(0xA084, qca_mmtype_to_value(QCA_MMTYPE_MULTICAST_INFO));
	LONGS_EQUAL(0xA088, qca_mmtype_to_value(QCA_MMTYPE_CLASSIIFCATION));
	LONGS_EQUAL(0xA090, qca_mmtype_to_value(QCA_MMTYPE_RX_TONE_MAP));
	LONGS_EQUAL(0xA0D0, qca_mmtype_to_value(QCA_MMTYPE_MULTIPORT_LNK_STA));
	LONGS_EQUAL(0xA0DC, qca_mmtype_to_value(QCA_MMTYPE_EM_ID_TABLE));
	LONGS_EQUAL(0xA0F0, qca_mmtype_to_value(QCA_MMTYPE_MCU_DIAG));
	LONGS_EQUAL(0xA0F8, qca_mmtype_to_value(QCA_MMTYPE_GET_PROERTY));
	LONGS_EQUAL(0xA100, qca_mmtype_to_value(QCA_MMTYPE_SET_PROERTY));
	LONGS_EQUAL(0xA14C, qca_mmtype_to_value(QCA_MMTYPE_ATTEN));
}

TEST(QCA, ModuleOperation_Req) {
	uint8_t expected[] = {
		0xb2,0x7c,0x2e,0x58,0x9d,0x71,0x00,0xe0,0x4c,0x36,0x07,0x91,
		0x88,0xe1,0x00,0xb0,0xa0,0x00,0xb0,0x52,0x00,0x00,0x00,0x00,
		0x01,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x02,0x70,0x00,
		0x00,0x78,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	};

	uint8_t buf[64];
	size_t len = qca_pack_pib_read((struct eth *)buf, sizeof(buf), 0);
	LONGS_EQUAL(18, len);

	struct eth *eth = (struct eth *)buf;
	eth_set_dst(eth, &expected[0]);
	eth_set_src(eth, &expected[6]);

	MEMCMP_EQUAL(expected, buf, sizeof(expected));
}
